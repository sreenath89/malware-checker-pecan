from pecan import expose, redirect, conf, response
from pecan.rest import RestController
from urlparse import urlparse
import ConfigParser
from malwarechecker.model import malware_checker_model as sqlModel
from sqlalchemy.sql import select, text
from sqlalchemy import and_
from malwarechecker import exception

class VersionController(RestController):

    def __init__(self, data = None):
        '''
        Constructor
        '''
        self.mcModel = sqlModel.MalwareCheckerModel()

    @expose(generic=True, template='json')
    def index(self, **data):
        print 'inside gettt'
        #return {"v1":{"date": "0000-00-00 00:00:00", "status":"current"}}
        return self.get_all()

    @expose(generic=True, template="json")
    def get(self, data):
        try:
            (path, query) = self.split_url(data)
            #Case when port is not present
            parts = path.split(':')
            print '11111'
            domain = parts[0]
            port = parts[1]

            #Set default port
            if not port:
                port = 80
            result = self.get_details(domain, port, query)
            print '222222' 
            return result.fetchone()
        except IndexError:
            response.status = 400
            return {"status_code": 400, "title": "Bad Request", "message": "Please check the input url"}
        except Exception as e:
            print 'exceptionnn'
            print e
            print '================'
            return exception.exception_handle(e)
        

    @expose(generic=True, template="json")
    def get_all(self):
        try:
            result = self.get_all_entries()
            return result.fetchall()
        except Exception as e:
            return exception.exception_handle(e)
        
    @expose(generic=True, template="json")
    def post(self):
        return "post"

    @expose(generic=True, template="json")
    def put(self):
        return "put"

    @expose(generic=True, template="json")
    def delete(self):
        return "delete"

    def split_url(self, url):
        uparts = urlparse(url)
        return uparts.path, uparts.query

    def get_details(self, domain, port, query_string):

        searchStr = "1=1"

        if domain:
            searchStr += " and malware_data.domain = '" + domain + "'"
        
        if port:
            searchStr += " and malware_data.port = '"+ port + "'"
            
        if query_string:
            searchStr += " and malware_data.query_string = '" + query_string + "'"
            
        selectOne = select([self.mcModel.malware_data]).where(text(searchStr))
        return self.mcModel.conn.execute(selectOne)

    def get_all_entries(self):
        selectAll = select([self.mcModel.malware_data])
        return self.mcModel.conn.execute(selectAll)